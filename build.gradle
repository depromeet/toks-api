plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'application'
    id 'distribution'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

ext {
    set('springCloudVersion', '2021.0.1')
    set('lombokVersion', '5.0.0')
    set('awsJavaSdkVersion', '1.12.186')
    set('apacheCommonsVersion', '3.12.0')
    set('springdocOpenapiUIVersion', '1.6.6')
    set('logbackVersion', '1.2.9')
    set('mapStructVersion', '1.4.2.Final')
    set('awsSecretManagerVersion', '2.4.1')
    set('jwtVersion', '0.11.2')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    enabled = false
}

allprojects {
    group = 'com.tdsn.toks'
    version = '0.0.1'

    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }
}

subprojects { subproject ->
    apply plugin: 'java'
    apply plugin: "java-library"
    apply plugin: "io.franzbecker.gradle-lombok"
    apply plugin: 'idea'
    apply plugin: 'application'
    apply plugin: 'distribution'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    plugins.withType(JavaPlugin) {

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        compileJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << "-Xlint"
        }

        idea {
            module {
                outputDir = file("$buildDir/classes/main/")
                testOutputDir file("$buildDir/classes/test")
                downloadSources = true
            }
        }

        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }

        dependencies {
            /* spring starter */
            implementation("org.springframework.boot:spring-boot-starter-web")
            implementation("org.springframework.boot:spring-boot-starter-webflux")
            implementation("org.springframework.boot:spring-boot-starter-validation")
            implementation("org.springframework.boot:spring-boot-starter-security")
            implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
            implementation("org.springframework.boot:spring-boot-starter-data-jpa")
            implementation("org.springframework.boot:spring-boot-starter-data-redis")

            /* reactor */
            implementation("org.projectreactor:reactor-spring:1.0.1.RELEASE")

            /* database */
            implementation("mysql:mysql-connector-java:8.0.28")

            /* aws */
            implementation("io.awspring.cloud:spring-cloud-starter-aws-secrets-manager-config:${awsSecretManagerVersion}")

            /* apache common utils */
            implementation("org.apache.commons:commons-lang3:3.12.0")
            implementation("org.apache.commons:commons-collections4:4.4")
            implementation("org.apache.commons:commons-pool2:2.11.1")

            /* swagger */
            implementation("org.springdoc:springdoc-openapi-ui:${springdocOpenapiUIVersion}")
            implementation("org.springdoc:springdoc-openapi-webmvc-core:${springdocOpenapiUIVersion}")

            /* google utils */
            implementation("com.google.guava:guava:31.1-jre")

            /* log */
            implementation("ch.qos.logback:logback-classic:${logbackVersion}")
            implementation("ch.qos.logback:logback-access:${logbackVersion}")
            implementation("ch.qos.logback:logback-core:${logbackVersion}")

            /* lombok */
            compileOnly("org.projectlombok:lombok")
            annotationProcessor("org.projectlombok:lombok")

            /* hibernate-spatial */
            implementation(group: 'org.hibernate', name: 'hibernate-spatial', version: '5.6.0.Final')

            /* jwt */
            implementation("io.jsonwebtoken:jjwt-api:${jwtVersion}")
            implementation("io.jsonwebtoken:jjwt-jackson:${jwtVersion}")
            runtimeOnly("io.jsonwebtoken:jjwt-impl:${jwtVersion}")

            /* spring dev tools */
            developmentOnly("org.springframework.boot:spring-boot-devtools")

            /* test */
            testImplementation("org.springframework.boot:spring-boot-starter-test")
            testImplementation("io.projectreactor:reactor-test")
            testImplementation("org.springframework.security:spring-security-test")
            testImplementation("com.navercorp.fixturemonkey:fixture-monkey-starter:0.3.5")
            testImplementation("com.drewnoakes:metadata-extractor:2.16.0")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        //for setting github-sonarqube
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacoco {
    toolVersion = "0.8.8"
}
